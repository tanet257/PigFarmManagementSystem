<?php

namespace App\Services;

use App\Models\Batch;
use App\Models\BatchPenAllocation;
use App\Models\Pen;
use App\Models\Barn;
use Illuminate\Support\Facades\DB;

/**
 * ========================================================================
 * BarnPenSelectionService
 * ========================================================================
 *
 * Service ‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏•‡πâ‡∏≤-‡∏Ñ‡∏≠‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á checkbox tables
 * ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏•‡πâ‡∏≤-‡∏Ñ‡∏≠‡∏Å‡πÉ‡∏ô‡∏´‡∏•‡∏≤‡∏¢ ‡πÜ ‡∏´‡∏ô‡πâ‡∏≤ ‡πÄ‡∏ä‡πà‡∏ô:
 * - Treatments: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏•‡πâ‡∏≤-‡∏Ñ‡∏≠‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤
 * - Dairy Records: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏•‡πâ‡∏≤-‡∏Ñ‡∏≠‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ô‡∏°
 * - Pig Sales: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏•‡πâ‡∏≤-‡∏Ñ‡∏≠‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏´‡∏°‡∏π
 *
 * ‡∏Ç‡πâ‡∏≠‡∏î‡∏µ: Centralized logic, consistent format, reusable across all pages
 *
 * ========================================================================
 */
class BarnPenSelectionService
{
    /**
     * ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πâ‡∏≤-‡∏Ñ‡∏≠‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∏‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏°‡∏π
     *
     * @param int $farmId ‡∏£‡∏´‡∏±‡∏™‡∏ü‡∏≤‡∏£‡πå‡∏°
     * @param int $batchId ‡∏£‡∏´‡∏±‡∏™‡∏£‡∏∏‡πà‡∏ô
     * @param bool $includeEmpty ‡∏£‡∏ß‡∏°‡∏Ñ‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á (default: false)
     * @return array ['success' => bool, 'data' => array, 'message' => string]
     *
     * FORMAT RESPONSE:
     * [
     *   'success' => true,
     *   'data' => [
     *     [
     *       'id' => 123,
     *       'barn_id' => 1,
     *       'barn_code' => '‡πÄ‡∏•‡πâ‡∏≤ A',
     *       'pen_id' => 5,
     *       'pen_number' => '01',
     *       'current_pig_count' => 50,
     *       'display_name' => '‡πÄ‡∏•‡πâ‡∏≤ A - ‡∏Ñ‡∏≠‡∏Å 01 (50 ‡∏ï‡∏±‡∏ß)'
     *     ],
     *     ...
     *   ],
     *   'message' => '‡∏û‡∏ö 5 ‡∏Ñ‡∏≠‡∏Å'
     * ]
     */
    public static function getPensByFarmAndBatch($farmId, $batchId, $includeEmpty = false)
    {
        try {
            console_log('üìã [BarnPenSelectionService] Getting pens for farm: ' . $farmId . ', batch: ' . $batchId);

            // Validate inputs
            if (!$farmId || !$batchId) {
                console_log('‚ö†Ô∏è [BarnPenSelectionService] Missing farm_id or batch_id');
                return [
                    'success' => false,
                    'data' => [],
                    'message' => '‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ farm_id ‡πÅ‡∏•‡∏∞ batch_id'
                ];
            }

            // ‚úÖ STEP 1: Verify farm and batch exist
            $batch = Batch::find($batchId);
            if (!$batch || $batch->farm_id != $farmId) {
                console_log('‚ö†Ô∏è [BarnPenSelectionService] Batch not found or farm mismatch');
                return [
                    'success' => false,
                    'data' => [],
                    'message' => '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏∏‡πà‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å'
                ];
            }

            // ‚úÖ STEP 2: Get barn-pen allocations with pig counts
            $allocations = BatchPenAllocation::where('batch_id', $batchId)
                ->with(['pen.barn'])
                ->get();

            console_log('‚úÖ [BarnPenSelectionService] Found ' . $allocations->count() . ' allocations');

            // ‚úÖ STEP 3: Format data for frontend table
            $pens = [];
            foreach ($allocations as $allocation) {
                $currentCount = $allocation->current_quantity ?? $allocation->allocated_pigs ?? 0;

                // Skip empty pens if includeEmpty is false
                if ($currentCount == 0 && !$includeEmpty) {
                    console_log('‚è≠Ô∏è [BarnPenSelectionService] Skipping empty pen: ' . $allocation->pen->pen_code);
                    continue;
                }

                $pens[] = [
                    'id' => $allocation->id,
                    'barn_id' => $allocation->pen->barn_id,
                    'barn_code' => $allocation->pen->barn->barn_code ?? 'N/A',
                    'pen_id' => $allocation->pen->id,
                    'pen_number' => $allocation->pen->pen_code ?? 'N/A',
                    'current_pig_count' => $currentCount,
                    'display_name' => sprintf(
                        '%s - %s (%d ‡∏ï‡∏±‡∏ß)',
                        $allocation->pen->barn->barn_code ?? 'N/A',
                        $allocation->pen->pen_code ?? 'N/A',
                        $currentCount
                    )
                ];
            }

            console_log('‚úÖ [BarnPenSelectionService] Formatted ' . count($pens) . ' pens for display');

            if (empty($pens)) {
                console_log('‚ö†Ô∏è [BarnPenSelectionService] No pens found');
                return [
                    'success' => false,
                    'data' => [],
                    'message' => '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏•‡πâ‡∏≤-‡∏Ñ‡∏≠‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∏‡πà‡∏ô‡∏ô‡∏µ‡πâ'
                ];
            }

            return [
                'success' => true,
                'data' => $pens,
                'message' => '‡∏û‡∏ö ' . count($pens) . ' ‡∏Ñ‡∏≠‡∏Å'
            ];

        } catch (\Exception $e) {
            console_log('‚ùå [BarnPenSelectionService] Error: ' . $e->getMessage());
            return [
                'success' => false,
                'data' => [],
                'message' => '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' . $e->getMessage()
            ];
        }
    }

    /**
     * ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏ (‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∏‡πà‡∏ô)
     *
     * @param int $farmId ‡∏£‡∏´‡∏±‡∏™‡∏ü‡∏≤‡∏£‡πå‡∏°
     * @return array ['success' => bool, 'data' => array, 'message' => string]
     */
    public static function getBarnsByFarm($farmId)
    {
        try {
            console_log(' [BarnPenSelectionService] Getting barns for farm: ' . $farmId);

            $barns = Barn::where('farm_id', $farmId)
                ->with('pens')
                ->get();

            console_log('‚úÖ [BarnPenSelectionService] Found ' . $barns->count() . ' barns');

            $formatted = $barns->map(function ($barn) {
                return [
                    'id' => $barn->id,
                    'barn_code' => $barn->barn_code,
                    'barn_name' => $barn->barn_name,
                    'pen_count' => $barn->pens->count(),
                ];
            });

            return [
                'success' => true,
                'data' => $formatted,
                'message' => '‡∏û‡∏ö ' . $formatted->count() . ' ‡πÄ‡∏•‡πâ‡∏≤'
            ];

        } catch (\Exception $e) {
            console_log('‚ùå [BarnPenSelectionService] Error: ' . $e->getMessage());
            return [
                'success' => false,
                'data' => [],
                'message' => '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' . $e->getMessage()
            ];
        }
    }
}

/**
 * ========================================================================
 * Helper function: console_log
 * ========================================================================
 * ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debug ‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î PHP ‡πÇ‡∏î‡∏¢‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á log ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Laravel logs
 * ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡πÑ‡∏î‡πâ‡πÉ‡∏ô: storage/logs/laravel.log
 *
 * @param string $message ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ log
 * @param string $level log level (debug, info, warning, error)
 */
if (!function_exists('console_log')) {
    function console_log($message, $level = 'debug')
    {
        \Illuminate\Support\Facades\Log::$level($message);
    }
}
