<?php

// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Password Validation Rules
// ‡∏£‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢: php test_password_validation.php

require __DIR__ . '/vendor/autoload.php';

$app = require_once __DIR__ . '/bootstrap/app.php';
$app->make('Illuminate\Contracts\Console\Kernel')->bootstrap();

use Illuminate\Support\Facades\Validator;

echo "üîê ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Password Policy\n";
echo "========================\n\n";

$testCases = [
    // [password, expected_result, description]
    ['12345678', false, '‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß 8 ‡∏ï‡∏±‡∏ß'],
    ['password', false, '‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡πá‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç)'],
    ['PASSWORD', false, '‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡∏ç‡πà‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç)'],
    ['Pass1', false, '‡∏™‡∏±‡πâ‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (5 ‡∏ï‡∏±‡∏ß)'],
    ['password123', false, '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡∏ç‡πà'],
    ['PASSWORD123', false, '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡πá‡∏Å'],
    ['Password', false, '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç'],
    ['Password123', true, '‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á! (‡∏°‡∏µ‡∏Ñ‡∏£‡∏ö)'],
    ['MyPass2024', true, '‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á! (‡∏°‡∏µ‡∏Ñ‡∏£‡∏ö)'],
    ['FarmPig99', true, '‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á! (‡∏°‡∏µ‡∏Ñ‡∏£‡∏ö)'],
    ['Admin@123', true, '‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á! (‡∏°‡∏µ‡∏Ñ‡∏£‡∏ö + ‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©)'],
];

$passCount = 0;
$failCount = 0;

foreach ($testCases as $index => $testCase) {
    [$password, $shouldPass, $description] = $testCase;

    $validator = Validator::make(
        ['password' => $password],
        [
            'password' => [
                'required',
                'string',
                'min:8',
                'regex:/[a-z]/',
                'regex:/[A-Z]/',
                'regex:/[0-9]/',
                'not_regex:/^[0-9]+$/',
            ]
        ],
        [
            'password.min' => '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 8 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£',
            'password.regex' => '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ ‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡πá‡∏Å (a-z), ‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡∏ç‡πà (A-Z) ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç (0-9)',
            'password.not_regex' => '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÑ‡∏î‡πâ',
        ]
    );

    $passed = $validator->passes();
    $result = $passed === $shouldPass;

    echo sprintf(
        "%d. [%s] %s - %s\n",
        $index + 1,
        $result ? '‚úÖ' : '‚ùå',
        str_pad($password, 15),
        $description
    );

    if (!$passed) {
        echo "   ‚ùå Error: " . $validator->errors()->first('password') . "\n";
    }

    if ($result) {
        $passCount++;
    } else {
        $failCount++;
    }

    echo "\n";
}

echo "========================\n";
echo "‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:\n";
echo "‚úÖ ‡∏ú‡πà‡∏≤‡∏ô: $passCount/" . count($testCases) . "\n";
echo "‚ùå ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô: $failCount/" . count($testCases) . "\n";
echo "========================\n";

if ($failCount === 0) {
    echo "üéâ ‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡πÄ‡∏ó‡∏™‡∏ï‡πå!\n";
} else {
    echo "‚ö†Ô∏è  ‡∏°‡∏µ‡∏ö‡∏≤‡∏á‡πÄ‡∏ó‡∏™‡∏ï‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö\n";
}
